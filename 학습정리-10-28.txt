1. 에러(Error)와 예외(Exception)의 차이는?
-오류(Error)는 시스템이 종료되어야 할 수준의 상황과 같이 수습할 수 없는 심각한 문제를 의미한다.개발자가 미리 예측하여 방지할 수 없다.
-예외(Exception)는 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생한다. 오류와 달리 개발자가 미리 예측하여 방지할 수 있기에 상황에 맞는 예외처리를 해야한다.

2. unchecked 와 checked 예외의 차이는?
- unchecked는 실행단계에서 확인할 수 있다.
(ex-RuntimeException)
-checked는 컴파일 단계에서 확인할 수 있다. 예외처리해주지 않으면 컴파일에러가 나기때문에 반드시 예외처리가 필요하다.
(ex-Exception을 상속받는 하위클래스 중 RuntimeException을 제외한 모든 예외)
3. 예외처리(Exception Handling) UML(상속도)참고하여  그리시오.
-

4. throws 에 대하여 설명하시오.
-예외처리를 위해 사용한다. try~catch와 다르게 예외를 상위쪽으로 미루어 처리할 수 있다.

5. 아래가 컴파일 에러가 나는 이유에 대하여 설명하시오.
try {
		int num = 6 / 0;
} catch (Exception e) {
		e.printStackTrace();
} catch (InputMismatchException e) {
		e.printStackTrace();
}

>catch (Exception e) {}가  catch(InputMismatchException e){} 보다 위에 올라가 있기때문이다. Exception은 예외처리의 가장 포괄적인 클래스이기때문에 항상 마지막에 위치해야한다.

6. 사칙연산 계산기를 아래의 조건으로 짜시오.
interface ICalculator {
	int add(int x, int y);
	int sub(int x, int y);
	int mul(int x, int y);
	int div(int x, int y);
}

public class CalculatorMain {

	public static void main(String[] args) {
		ICalculator cal = new Calculator();

		//출력결과 참고 하여 try catch 를 적절히 넣을것  
			System.out.println(cal.add(6, 5));
			System.out.println(cal.sub(6, 5));	
			System.out.println(cal.mul(6, 5));	
			System.out.println(cal.div(6, 0));

	}
}

/*
================================================
11
1
30
java.lang.ArithmeticException: / by zero
	at Calculator.div(CalculatorMain.java:32)
	at CalculatorMain.main(CalculatorMain.java:45)
계산기 종료
*/

>
class Calculator implements ICalculator{

	@Override
	public int add(int x, int y) {		
		return x+y;
	}
	@Override
	public int sub(int x, int y) {
		
		return x-y;
	}
	@Override
	public int mul(int x, int y) {
		
		return x*y;
	}
	@Override
	public int div(int x, int y) {	
		int result = 0;
		
		try {
			result = x / y;
		} catch (Exception e) {
			System.out.println("0으로 나눌 수 없습니다.");
		}		
		return result;	
	}		
}
7.과일, 사과, 배, 포도를 표현한 클래스를 만들고 이들 간의 관계를 고려하여 하나의 클래스를 추상 클래스로 만들어 메소드 print()를 구현하고 
다음과 같은 소스와 결과가 나오도록 클래스를 작성하시오.
- 소스
Fruit fAry[] = {new Grape(), new Apple(), new Pear());
for(Fruit f : fAry)
f.print();

- 결과
나는 포도이다.
나는 사과이다.
나는 배이다.

>
interface Fruit{
	
	void kinds();
	public default void print() {
		System.out.print("나는 ");
		kinds();		
	}
}
class Grape implements Fruit {

	@Override
	public void kinds() {
		System.out.println("포도이다.");
	}
}
class Apple implements Fruit{

	@Override
	public void kinds() {
		System.out.println("사과이다.");		
	}	
}
class Pear implements Fruit{

	@Override
	public void kinds() {
		System.out.println("배이다.");		
	}
	
}