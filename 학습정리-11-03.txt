1.Generic 이전의 코드의 문제 상황들을 예시로 설명하시오.
-제네릭 이전의 코드는 형변환 과정이 수반되어 컴파일러 오류발견 가능성을 낮추는 결과로 이어졌다.
예를들어
class Apple {
	@Override
	public String toString() {
	return "I am apple";
	}
}
class Orange {
	@Override
	public String toString() {
	return "I am an orange";
	}
}
class Box {
	private Object ob;
	public void set(Object o) {
		ob = o;
	}
	public Object get() {
		return ob;
	}
}
public static void main(String[] args) {
Box aBox = new Box();
Box oBox = new Box();
		
aBox.set("Apple");
oBox.set("Orange");

Apple ap = (Apple)aBox.get();
Orange og = (Orange)oBox.get();

System.out.println(ap);
System.out.println(og);
}
이경우 실행결과 오류가 발생한다.aBox.set("Apple");
oBox.set("Orange"); 에서 사과와 오렌지가 아닌 문자열을 담았는데 Apple ap = (Apple)aBox.get(); Orange og = (Orange)oBox.get(); 에서 상자에 과일이 담기지 않았는데 과일을 꺼내려 했기때문에 오류가 발생한 것이다. 이 경우 컴파일 과정에서 오류가 발견되지 않는다.
Box aBox = new Box();
Box oBox = new Box();

	
aBox.set("Apple");
oBox.set("Orange");
		
System.out.println(aBox.get());
System.out.println(oBox.get());

더군다나 이경우 실행오류도 나타나지 않고 그래도 Apple과 Orange가 출력된다.  이것을 해결하기 위해서 기존 소스코드로는 해결이 불가능 하기때문에 새로운 문법을 창조해서 적용시켰는데 이것이 Generic코드이다.

2. 아래의 결과가 나오도록 프로그래밍 하시오.
class DDBoxDemo {
    public static void main(String[] args) {
        DBox<String, Integer> box1 = new DBox<>();
        box1.set("Apple", 25);

        DBox<String, Integer> box2 = new DBox<>();
        box2.set("Orange", 33);
        
        DDBox<DBox<String, Integer>, DBox<String, Integer>> ddbox = new DDBox<>();
        ddbox.set(box1, box2);

        System.out.println(ddbox);
    }
}

/*
==================
Apple & 25
Orange & 33
*/
>
class Box<T> {
	private T ob;
	
	public void set(T o) {
		ob=o;
	}
	public T get() {
		return ob;
	}	
}
class DBox<T,V>{
	private T ob;
	private V num;
	
	public void set(T o,V n) {
		ob=o;
		num=n;
	}
	@Override
	public String toString() {
		return ob + "&" + num;
	}
}
class DDBox<L,R>{
	private L ob;
	private R tb;
	
	public void set(L o,R n) {
		ob=o;
		tb=n;
	}
	@Override
	public String toString() {
		return ob+"\n"+ tb;
	}
	
}


3.아래와 같이 결과 값이 나오도록 만드시오.
   public static void main(String[] args) {
        DBox<String, Integer> box = new DBox<String, Integer>();
        box.set("Apple", 25);
        System.out.println(box);
        
        DBox<String, String> box2 = new DBox<String,String>();
        box2.set("Apple", "Orange");
        System.out.println(box2);

Apple & 25
Apple & Orange

>
class DBox<T,T1>{
	private T ob;
	private T1 ob1;
	
	public void set(T o,T1 n) {
		ob=o;
		ob1=n;
	}
	@Override
	public String toString() {
		return ob + "&" + ob1;
	}
}

4. 업다운 게임을 짜시오.

1. 랜덤으로 숫자를 생성 - 컴퓨터가 가짐
2.게임을 시작 유저가 숫자를 입력
3. 10번의 기회를 주어 맞으면 맞았다고 출력 10번의 기회가 지나면 게임 종료.

출력의 예
========================================

**************
1. 게임 시작
2. 게임 종료
**************
1
게임시작
>>>
50
down
>>>
45
down
>>>
30
down
>>>
20
down
>>>
10
up
>>>
15
up
>>>
17
맞았다
**************
1. 게임 시작
2. 게임 종료
**************
>
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		while (true) {
			int user = 0;
			int computer = (int) (Math.random() * 100);
			System.out.println("*************");
			System.out.println("1.게임시작" + "\n" + "2.게임 종료");
			System.out.println("**************");
			int scanstart = sc.nextInt();
			if (scanstart == 1) {
				System.out.println("게임시작");
			} else {
				System.out.println("게임 종료");
				break;
			}
			for (int i = 0; i < 10; i++) {
				System.out.println(">>>");
				user = sc.nextInt();
				if (user == computer) {
					System.out.println("맞혔다.");
					break;
				} else if (user > computer) {
					System.out.println("Down");
					continue;
				} else if (user < computer) {
					System.out.println("Up");
					continue;
				} else {
					System.out.println("잘못된 입력입니다.");
				}
			}
			if (user == computer) {
				System.out.println("다시하시겠습니까?");
			} else {
				System.out.println("10번안에 맞히지 못했습니다.");
			}
		}
	}