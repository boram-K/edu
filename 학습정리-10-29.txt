1. Object클래스의 11개 함수를 나열해 보시오.
그중 우리가 외워야 할 함수들은 찍어 보세요 ㅎㅎ
-toStirng();
-hashCoade();
-equals()
-getClass
-finalize()
-clone()
-notify()
-notifyAll()
-wait()
-wait(long timeout)
-wait(long timeout, int nanos)
-이중에서 외워야할 함수들은  toString(),equals(),clone(),finalize()

2. equals 함수에 대하여 설명하시오.
-equals는 Object클래스의 함수로 인스턴스의 내용비교를 위한 기능을 equals메소드에 담아 정의한다.

3. String 클래스 에서 문자열 비교시 equals를 쓰는 이유는?
-String클래스는 Object클래스를 상속받고 있기때문에 equals 함수를 써서 오버라이딩해서 비교할 수 있다.

4. shallow copy, deep copy 의 차이는?
-shallow copy는 얕은 copy,Deep copy라고 말한다. shallow카피는 단순하게 원본의 참조변수의 참조값만 복사하기 때문에 원본을 수정하게 되면 동일한 객체를 참조하여 copy값이 따라가지만 Deep카피는 원본의 참조변수가 가리키는 객체까지 복사하기 때문에 독립된 개체로 취급받게 된다.

5. 금일 배운 Rectangle의 shall copy 와 deep copy 일 때의 메모리 그림을 그려보시오.
-학습정리-10-29-5

6. 아래를 프로그래밍 하시오.
- 클래스 Person
* 필드 : 이름, 나이, 주소 선언
- 클래스 Student
* 필드 : 학교명, 학과, 학번, 8개 평균평점을 저장할 배열로 선언
* 생성자 : 학교명, 학과, 학번 지정
* 메소드 average() : 8개 학기 평균평점의 평균을 반환
- 클래스 Person과 Student 
- 프로그램 테스트 프로그램의 결과 : 8개 학기의 평균평점은 표준입력으로 받도록한다.

이름 : 김다정
나이 : 20

주소 : 서울시 관악구
학교 : 동양서울대학교
학과 : 전산정보학과
학번 : 20132222
----------------------------------------

8학기 학점을 순서대로 입력하세요

1학기 학점  → 3.37
2학기 학점  → 3.89
3학기 학점  → 4.35
4학기 학점  → 3.76
5학기 학점  → 3.89
6학기 학점  → 4.26
7학기 학점  → 4.89
8학기 학점  → 3.89

----------------------------------------

8학기 총 평균 평점은 4.0375점입니다.

>
import java.util.Scanner;

class Person{
	private int age;
	private String name,adress;
			
}
class Student extends Person{
	private String scname,depart;
	private int id;
	private double[] avg = new double[8];
	Scanner sc = new Scanner(System.in);
	
	public Student
	(String name, int age, String adress, String scname, String depart, int id) {
		super();
		this.depart=depart;
		this.id=id;
		this.scname=scname;
	}
	public void setAvg(double[] avg) {
		for(int i=0; i<avg.length;i++) {
			avg[i]=sc.nextDouble();
		}
	}	
	public double[] getAvg() {
		return avg;
	}
	public double average(){
		setAvg(avg);
		double sum=0;		
		for(int i=0; i<avg.length;i++) {
			sum += avg[i];
		}return sum/avg.length;
	}

}

public class Test2 {

	public static void main(String[] args) {	
		
		Person k = 
			new Student("김다정",20,"서울시 관악구","동양서울대학교","전산정보학과",20132222);
		
		System.out.println("8학기 총 평균 평점은 "+((Student) k).average()+"점입니다.");	
	}
	
}

7.철수 학생은 다음 3개의 필드와 메소드를 가진 4개의 클래스 Add, Sub, Mul, Div를 작성하려고 한다.

- int 타입의 a, b 필드: 2개의 피연산자
- void setValue(int a, int b): 피연산자 값을 객체 내에 저장한다.
- int calculate(): 클래스의 목적에 맞는 연산을 실행하고 결과를 리턴한다.

곰곰 생각해보니, Add, Sub, Mul, Div 클래스에 공통된 필드와 메소드가 존재하므로 새로운 추상 클래스 Calc를 작성하고,
 Calc를 상속받아 만들면 되겠다고 생각했다. 
그리고 main() 메소드에서 다음 실행 사례와 같이 2개의 정수와 연산자를 입력받은 후, 
Add, Sub, Mul, Div 중에서 이 연산을 처리할 수 있는 객체를 생성하고 setValue() 와 calculate()를 호출하여 
그 결과 값을 화면에 출력하면 된다고 생각하였다. 

철수처럼 프로그램을 작성하라.(예외처리 구문도 넣어 주세요^^)

두 정수와 연산자를 입력하시오 >> 5 7 +
>
import java.util.Scanner;

abstract class Calc {
	protected int a;
	protected int b;

	void setValue(int a, int b) {
	}

	int calculate() {
		return 0;
	}

}

class Add extends Calc {

	@Override
	void setValue(int a, int b) {
		this.a = a;
		this.b = b;
	}

	@Override
	int calculate() {
		return a + b;

	}

}

class Sub extends Calc {

	@Override
	void setValue(int a, int b) {
		this.a = a;
		this.b = b;

	}

	@Override
	int calculate() {
		return a - b;

	}

}

class Mul extends Calc {

	@Override
	void setValue(int a, int b) {
		this.a = a;
		this.b = b;

	}

	@Override
	int calculate() {
		return a * b;

	}

}

class Div extends Calc {

	@Override
	void setValue(int a, int b) {
		this.a = a;
		this.b = b;

	}

	@Override
	public int calculate() {
		int result = 0;

		try {
			result = a / b;
		} catch (Exception e) {
			System.out.println("0으로 나눌 수 없습니다.");
		}
		return result;
	}
}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("두 정수와 연산자를 입력하시오.");
		int a = sc.nextInt();
		int b = sc.nextInt();
		char c = sc.next().charAt(0);
		switch (c) {
		case '+': {
			Calc plus = new Add();
			plus.setValue(a, b);
			System.out.println(plus.calculate());
			break;
		}
		case '-': {
			Calc min = new Sub();
			min.setValue(a, b);
			System.out.println(min.calculate());
			break;
		}
		case '/': {
			Calc div = new Div();
			div.setValue(a, b);
			System.out.println(div.calculate());
			break;
		}
		case '*': {
			Calc mul = new Mul();
			mul.setValue(a, b);
			System.out.println(mul.calculate());
			break;
		}
		default:
			throw new IllegalArgumentException("Unexpected value: " + c);
		}

	}

8. 문자열을 입력 받아 한 글자씩 회전시켜 모두 출력하는 프로그램을 작성하라.
(클래스로 작성할 필요없이 메인에서 직접 할것)
[Hint] Scanner.nextLine()을 이용하면 빈칸을 포함하여 한 번에 한 줄을 읽을 수 있다.
문자열을 입력하세요. 빈칸이나 있어도 되고 영어 한글 모두 됩니다.

I Love you
Love youI
Love youI
ove youI L
ve youI Lo
e youI Lov
youI Love
youI Love
ouI Love y
uI Love yo
I Love you
```
>
public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("문자열을 입력하세요");
		String str = sc.nextLine();
		
		for(int i=0;i<str.length();i++) {
			String a= str.substring(0,1);
			String b = str.substring(1);
			str=b+a;
			System.out.println(str);
		}

	}