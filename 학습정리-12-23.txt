1. 게시판을 스프링으로 구현을 완성하시오.
list -> write -> delete -> update -> reply -> update -> uphit


먼저 BoardVO작성>
package edu.kosmo.ex.vo;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@AllArgsConstructor
@NoArgsConstructor
@Setter
@Getter
@ToString
public class BoardVO {
	private int bid;
	private String bname;
	private String btitle;
	private String bcontent;
	private Timestamp bdate;
	private int bhit;
	private int bgroup;
	private int bstep;
	private int bindent;

}

Controller 작성>
package edu.kosmo.ex.controller;

import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import edu.kosmo.ex.service.BoardService;
import edu.kosmo.ex.vo.BoardVO;
import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Log4j
@AllArgsConstructor
@Controller
public class BoardController {
	
	@Inject
	private BoardService boardService;
	
	@GetMapping("/list") //list로 치고 들어오면..
	public String list(Model model) {
		log.info("list...");
		
		model.addAttribute("boardList",boardService.getList());
		
	
		return "board/list";
	}
	
	@GetMapping("/content_view") 
	public String content_view(BoardVO boardVO,Model model) {
		log.info("content_view...");
		log.info("BoardVO : " + boardVO);
		int bid = boardVO.getBid();
		
		model.addAttribute("content_view",boardService.get(bid));
		
	
		return "board/content_view";
	}
	@GetMapping("/write_view") 
	public String write_view() {
		log.info("write_view....");
		
		return "board/write_view";
	}
	@PostMapping("/write") 
	public String write(BoardVO boardVO) {
		log.info("write....");
		
		boardService.register(boardVO);
		
		return "redirect:list";
	}
	@PostMapping("/modify") 
	public String modify(BoardVO boardVO) {
		log.info("modify....");
		
		
		boardService.modify(boardVO);
		
		return "redirect:list";
	}
	@GetMapping("/delete") 
	public String delete(BoardVO boardVO) {
		log.info("delete....");
		
		
		boardService.delete(boardVO);
		
		return "redirect:list";
	}
	@GetMapping("/reply_view") 
	public String reply_view(BoardVO boardVO,Model model) {
		log.info("reply_view...");
		log.info("BoardVO : " + boardVO);
		int bid = boardVO.getBid();
		
		model.addAttribute("reply_view",boardService.get(bid));
		
	
		return "board/reply_view";
	}
	@PostMapping("/reply") 
	public String reply(BoardVO boardVO) {
		log.info("reply....");
		
		boardService.reply(boardVO);
		
		return "redirect:list";
	}
}

BoardMapper 작성>
package edu.kosmo.ex.mapper;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.apache.ibatis.annotations.Mapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import edu.kosmo.ex.vo.BoardVO;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;


@Mapper
public interface BoardMapper {
	
	//목록보기
	List<BoardVO> getList();
	
	//해당 게시글 보기
	BoardVO read(int bid); //여기 변수 이름과 sql이름 맞춰줄 것.
	
	//글 작성하기
	void insert(BoardVO board);
	
	//글 수정하기
	void update(BoardVO board);
	
	//글 삭제하기
	void delete(BoardVO board);
	
	//답글 달기
	void reply(BoardVO board);
	
	//답글 이 바로 아래 위치하게 하기
	void replyShape(BoardVO board);
	
	//조회수 올리기
	void uphit(int bid);
}

BoardService interface 작성>
package edu.kosmo.ex.service;

import java.util.List;

import edu.kosmo.ex.vo.BoardVO;

public interface BoardService {
	
	List<BoardVO> getList();
	BoardVO get(int bid);
	void register(BoardVO board);
	void modify(BoardVO board);
	void delete(BoardVO board);
	void reply(BoardVO board);
	
}

BoardServiceImpl 작성>
package edu.kosmo.ex.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import edu.kosmo.ex.mapper.BoardMapper;
import edu.kosmo.ex.vo.BoardVO;
import lombok.extern.log4j.Log4j;

@Log4j
@Service
public class BoardServiceImpl implements BoardService {

	
	@Autowired
	private BoardMapper boardMapper;
	//사실 오토와이어드 안해도 단독으로도 객체를 집어넣어준다. 4.4버전 이후.
	
	@Override
	public List<BoardVO> getList() {
		log.info("getlist..."); //이걸 사용하면 앞에 시간까지 나타내줌...
		
				
		return boardMapper.getList();
	}

	@Override
	public BoardVO get(int bid) {
		log.info("get()...");
		boardMapper.uphit(bid);
		return boardMapper.read(bid);
	}

	@Override
	public void register(BoardVO board) {
		log.info("register..");
		
		boardMapper.insert(board);
	}

	@Override
	public void modify(BoardVO board) {
		log.info("modify....");
		
		boardMapper.update(board);
	}

	@Override
	public void delete(BoardVO board) {
		log.info("delete..");
		
		boardMapper.delete(board);
	}

	@Override
	public void reply(BoardVO board) {
		log.info("reply..");
		boardMapper.replyShape(board);
		boardMapper.reply(board);
		
	}
	

}
BoardMapper.xml 작성>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.kosmo.ex.mapper.BoardMapper">
	
	<select id="getList" resultType="edu.kosmo.ex.vo.BoardVO">
	<![CDATA[
		select * from mvc_board order by bgroup desc, bstep asc 
	]]>
	</select>
	<!-- ;조심. -->
	
	<select id="read" resultType="edu.kosmo.ex.vo.BoardVO">
	<![CDATA[
		select * from mvc_board where bid = #{bid} 
	]]>
	</select>
	
	<!-- void 이므로 resulttype 없음 -->
	<select id="insert">
	<![CDATA[
		insert into mvc_board (bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent) 
		values (mvc_board_seq.nextval, #{bname}, #{btitle}, #{bcontent}, 0, mvc_board_seq.currval, 0, 0)
	]]>
	</select>
	
	<select id="update">
	<![CDATA[
		UPDATE mvc_board SET bname= #{bname} , btitle=#{btitle},bcontent=#{bcontent} WHERE bid = #{bid}
	]]>
	</select>
	
	<select id="delete">
	<![CDATA[
		DELETE FROM mvc_board WHERE bid = #{bid}
	]]>
	</select>
	
	<select id="reply">
	<![CDATA[
		insert into mvc_board (bid, bname, btitle, bcontent, bgroup, bstep, bindent) 
		values (mvc_board_seq.nextval, #{bname},#{btitle},#{bcontent},#{bgroup}, #{bstep}+1,#{bindent}+1)
	]]>
	</select>
	
	<select id="replyShape">
	<![CDATA[
		update mvc_board set bstep = bstep +1 WHERE bgroup =#{bgroup} and bstep > #{bstep}
	]]>
	</select>
	
	<select id="uphit">
	<![CDATA[
		UPDATE mvc_board SET bhit = bhit +1 WHERE bid = #{bid}
	]]>
	</select>
</mapper>

list.jsp 작성>
<%@ page language="java" contentType="text/html;charset=utf-8" pageEncoding="utf-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
<html>
<head>
	<title>Home</title>
</head>
<body>
<table width="500" border="1">
			<tr>
				<td>번호:</td>
				<td>이름:</td>
				<td>제목:</td>
				<td>날짜:</td>
				<td>히트:</td>
			
			</tr>

			<!-- 여기 또 핵심 3 -->
			<c:forEach var="board" items="${boardList}">
			<tr>
			
				<td>${board.bid}</td>
				<td>${board.bname}</td>
				<td>
					<c:forEach begin="1" end="${board.bindent}"> [Re] </c:forEach>
 						<a href="content_view.do?bid=${board.bid}">${board.btitle}</a>
				</td>
				
				
				<td>${board.bdate}</td>
				<td>${board.bhit}</td>
				
			</tr>	
			</c:forEach>
			
			<tr>
				<td colspan="5"> 
					<a href="write_view">글작성</a>
				</td>
			</tr>
		
		</table>

</body>
</html>

content_view.jsp 작성>

<%@ page language="java" contentType="text/html;charset=utf-8" pageEncoding="utf-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
<html>
<head>
	<title>Home</title>
</head>
<body>
<table width="500" cellpadding="0" cellspacing="0" border="1">
<form action="modify" method="post">
<input type="hidden" name="bid" value="${content_view.bid}">
<tr>
<td> 번호 </td>
<td> ${content_view.bid} </td>
</tr>
<tr>
<td> 히트 </td>
<td> ${content_view.bhit} </td>
</tr>
<tr>
<td> 이름 </td>
<td> <input type="text" name="bname" value="${content_view.bname}"></td>
</tr>
<tr>
<td> 제목 </td>
<td> <input type="text" name="btitle" value="${content_view.btitle}"></td>
</tr>
<tr>
<td> 내용 </td>
<td> <textarea rows="10" name="bcontent" >${content_view.bcontent}</textarea></td>
</tr>
<tr >
<td colspan="2"> <input type="submit" value="수정"> &nbsp;&nbsp; <a href="list">목록보기</a> &nbsp;&nbsp; <a href="delete?bid=${content_view.bid}">삭제</a> &nbsp;&nbsp; <a href="reply_view?bid=${content_view.bid}">답변</a></td>
</tr>
</form>
</table>

</body>
</html>

write_view.jsp 작성>
<%@ page language="java" contentType="text/html;charset=utf-8" pageEncoding="utf-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
<html>
<head>
	<title>Home</title>
</head>
<body>
<table width="500" cellpadding="0" cellspacing="0" border="1">
		<form action="write" method="post">
			<tr>
				<td> 이름 </td>
				<td> <input type="text" name="bname" size = "50"> </td>
			</tr>
			<tr>
				<td> 제목 </td>
				<td> <input type="text" name="btitle" size = "50"> </td>
			</tr>
			<tr>
				<td> 내용 </td>
				<td> <textarea name="bcontent" rows="10" ></textarea> </td>
			</tr>
			<tr >
				<td colspan="2"> <input type="submit" value="입력"> &nbsp;&nbsp; <a href="list">목록보기</a></td>
			</tr>
		</form>
	</table>
	
</body>

</html>

reply_view.jsp 작성>
<%@ page language="java" contentType="text/html;charset=utf-8" pageEncoding="utf-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
<html>
<head>
	<title>Home</title>
</head>
<body>
<table width="500" cellpadding="0" cellspacing="0" border="1">
		<form action="reply" method="post">
			<input type="hidden" name="bid" value="${reply_view.bid}"> <!-- hidden을 하게되면 사용자에게는 안보임 -->
			<input type="hidden" name="bgroup" value="${reply_view.bgroup}">
			<input type="hidden" name="bstep" value="${reply_view.bstep}">
			<input type="hidden" name="bindent" value="${reply_view.bindent}">
			<tr>
				<td> 번호 </td>
				<td> ${reply_view.bid} </td>
			</tr>
			<tr>
				<td> 히트 </td>
				<td> ${reply_view.bhit} </td>
			</tr>
			<tr>
				<td> 이름 </td>
				<td> <input type="text" name="bname" size = "20" value="${reply_view.bname}"></td>
			</tr>
			<tr>
				<td> 제목 </td>
				<td> <input type="text" name="btitle" size = "50" value="${reply_view.btitle}"></td>
			</tr>
			<tr>
				<td> 내용 </td>
				<td> <textarea rows="10"  cols="60" name="bcontent">${reply_view.bcontent}</textarea></td>
			</tr>
			<tr >
				<td colspan="2"><input type="submit" value="답변"> <a href="list" >목록</a></td>
			</tr>
		</form>
	</table>
	
</body>

</html>

2. 아래의 SQL 을 분석하시오.

 SELECT * FROM (
              SELECT ROWNUM AS RNUM, A.* FROM (
                       SELECT
                             *
                         FROM
                             mvc_board 
                         order by bGroup desc, bStep asc   
             ) A WHERE ROWNUM <= #{pageNum} * #{amount}
         ) WHERE RNUM > (#{pageNum}-1) * #{amount}

>분석해보면 우선 mvc_board를 정렬해준 뒤, 그 목록에 ROWNUM을 차례로 붙여준다. 그리고 그 목록의 rownum을 기준으로 페이지가 만약 1이고 한 페이지에 보여줄 갯수가 10이라고 했을 때, rownum<=10 이거나 rownum>0보다 큰 게시글을 보여주는 것을 나타낸 것 같다.

3.js 아래를 완성하시오.

단 - es6 문법 class로 완성할것

let circle = new Circle(100);
console.log(circle.getArea()); //넓이 출력 

>
class Circle{
	 constructor(r){
    	this.r = r;
    }
	
  getArea(){
  return (this.r*this.r)*3.14;
  }
}

let circle = new Circle(100);
console.log(circle.getArea());


let rec = new Rectangle(100, 100);
console.log(rec.getArea()); //넓이 출력 

>
class Rectangle{
	constructor(width,height){
    this.width=width;
      this.height = height;
    }
  getArea(){
  return this.width*this.height;
  }
}


let rec = new Rectangle(100, 100);
console.log(rec.getArea());





