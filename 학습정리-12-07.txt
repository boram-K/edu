1. 게시판 삭제를 구현하시오.
>
controller.java>
	private void actionDo(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException  {
		System.out.println("actionDo");
		request.setCharacterEncoding("UTF-8");
		
		String viewPage = null;
		BCommand command = null; //이부분이 인테페이스 Command부분.
		//컨트롤러가 커맨드 생성->그 커맨드가 DAO,DTO 생성. 그다음 받아서 콘트롤러가 화면에 출력
		
		String uri = request.getRequestURI();
		String conPath = request.getContextPath();
		String com = uri.substring(conPath.length());
		
		if(com.equals("/write_view.do")) {
			viewPage = "write_view.jsp";
		} else if(com.equals("/write.do")) {
			command = new BWriteCommand();
			command.execute(request, response);
			viewPage = "list.do";
		} else if(com.equals("/list.do")) {
			command = new BListCommand();
			command.execute(request, response);
			viewPage = "list.jsp";
		} else if(com.equals("/content_view.do")){
			command = new BContentCommand();
			command.execute(request, response);
			viewPage = "content_view.jsp";
		}else if(com.equals("/reply_view.do")){
			command = new BReply_viewCommand();
			command.execute(request, response);
			viewPage = "reply_view.jsp";
		}else if(com.equals("/reply.do")){
			command = new BReplyCommand();
			command.execute(request, response);
			viewPage = "list.do";
		}else if(com.equals("/delete.do")){
			command = new BDleteCommand();
			command.execute(request, response);
			viewPage = "list.do";
		}
		
		RequestDispatcher dispatcher = request.getRequestDispatcher(viewPage);
		dispatcher.forward(request, response); //이걸 파파라치라 표현.. 이걸통해서 UI로 넘기는 셈.
		
	}

BDao.java>
	public void delete(int uid) {
		System.out.println("delete......");
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		
		try {
			connection = dataSource.getConnection();
			String query = "DELETE FROM mvc_board WHERE bid = ?";
			preparedStatement = connection.prepareStatement(query);
			preparedStatement.setInt(1, uid);
			
			int rn = preparedStatement.executeUpdate(); //이게 commit역할이기도 함.
			System.out.println("갯수"+rn);
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			try {
				if(preparedStatement != null) preparedStatement.close();
				if(connection != null) connection.close();
			} catch (Exception e2) {
				// TODO: handle exception
				e2.printStackTrace();
			}
		}
		
	}

BDeleteCommand.java>
public class BDleteCommand implements BCommand {

	@Override
	public void execute(HttpServletRequest request, HttpServletResponse response) {
		String  bid = request.getParameter("bid");
		int uid = Integer.valueOf(bid);
		
		BDao bao = new BDao();
		bao.delete(uid);
		
		request.setAttribute("delete", bao);

	}

}

2.  데이터 무결성을 위한 제약 조건 4가지는?

Not Null> Null을 허용안한다.
Unique>중복된 값을 허용하지 않아 항상 유일한 값을 가지게 함.
Primary Key>Null을 허용하지 않으며, 중복된 값도 허용하지 않는다. Not Null과 Unique의 조건을 결합한 형태
Foreign Key>참조되는 테이블의 컬럼값이 존재하면 허용

3. 커밋과 롤백에 대하여 설명하시오.
>commit은 모든 작업을 정상적으로 처리하겠다고 확정하는 명령어로, 트랜젝션의 처리과정을 DB에 반영하기 위해 변경된 내용을 모두 영구 저장한다. insert,update,delete는 후에 commit이 반드시 필요하다.
>rollback은 이전 상태로 되돌리는 명령어이다. 그러나 delete로 삭제된 데이터를 되돌릴 수는 있으나 drop으로 삭제한 테이블을 다시 되돌리는 것은 불가능하다.




=========================================

69번

 jsp_board_test1 프로젝트를 생성하고, 아래의 객체를 완성하여 list.jsp 를 완성하시오.
- DTO
- DAO
- Controller
- Command

