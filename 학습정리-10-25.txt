1. instanceof 연산자에 대하여 설명하시오.
-참조변수가 참조하고 있는 인스턴스의 실제타입을 알기 위해 사용한다.
'객체명  instanceof 클래스명'이라는 형태로 사용되며 객체가 클래스명의 인스턴스를 참조하면 true를 반환하고 아니면 false를 반환한다.

2. 아래를 프로그래밍 하시오.

 다음을 만족하는 클래스 Employee를 작성하시오. 

- 클래스 Employee(직원)은 
 //클래스 Regular(정규직)와 Temporary(비정규직)의 상위 클래스
- 필드: 이름, 나이, 주소, 부서, 월급 정보를 필드로 선언
- 생성자 : 이름, 나이, 주소, 부서를 지정하는 생성자 정의
- 메소드 printInfo() : 인자는 없고 자신의 필드 이름, 나이, 주소, 부서를 출력

=======================================

다음을 만족하는 클래스 Regular를 작성하시오. 

- 클래스 Regular는 위에서 구현된 클래스 Employee의 하위 클래스
- 생성자 : 이름, 나이, 주소, 부서를 지정하는 상위 생성자 호출
- Setter : 월급 정보 필드를 지정
- 메소드 printInfo() : 인자는 없고 기본적인 이름, 나이, 주소, 부서 를 출력후
 "정규직  월급" 이라는 이름으로 월급출력
-상위 클래스에서 접근제한자 수정이 필요 하면 수정 할것.

>
class Employee{
	private String name;
	private String adress;
	private String part;
	private int age;
	protected int salary;
	
 public Employee(String name,int age,String adress,String part) {
		this.name=name;
		this.age=age;
		this.adress=adress;
		this.part=part;
	}

	public void printinfo() {
		System.out.println("이름:"+name);
		System.out.println("주소:"+adress);
		System.out.println("부서:"+part);
		System.out.println("나이:"+age);
	}
}
class Regular extends Employee{
	
	public Regular(String name,int age,String adress,String part) {
		super(name, age, adress, part);		
	}
	public void setSalary(int salary) {
		super.salary=salary;
	}
	
	public void printinfo() {
		super.printinfo();
		System.out.println("정규직 월급:" +super.salary);
	}	
}

public class Edu1020 {

	public static void main(String[] args) {
		
		Employee employee = new Employee("홍길동", 30, "newyork","IT");
		employee.printinfo();
		Regular r = new Regular("김나나", 34, "newyork","IT");
		r.setSalary(1000);
		r.printinfo();
	}
}

3.Point 를 상속받아
3차원의 점을 나타내는 Point3D 클래스를 작성하라. 
다음 main() 메소드를 포함하고 실행 결과와 같이 출력되게 하라.
==================================================
public static void main(String[] args) {
	Point3D p = new Point3D(1,2,3); // 1,2,3은 각각 x, y, z축의 값.
	System.out.println(p.toString()+"입니다.");
	p.moveUp(); // z 축으로 위쪽 이동
	System.out.println(p.toString()+"입니다.");
	p.moveDown(); // z 축으로 아래쪽 이동
	p.move(10, 10); // x, y 축으로 이동
	System.out.println(p.toString()+"입니다.");
	p.move(100,  200, 300); // x, y, z축으로 이동
	System.out.println(p.toString()+"입니다.");
}
=====================================

class Point {
	private int x, y;
	
	public Point() {
		
	}
	
	public Point(int x, int y) { 
		this.move(x, y);  
	}

	public int getX() { 
		return x; 
	}
	
	public int getY() { 
		return y; 
	}
	
	protected void move(int x, int y) {
		this.x =x; 						
		this.y = y;    					
	}
}

class ColorPoint extends Point{
	private String color = "BLACK";   
	
	public ColorPoint() {
		
	}
	
	public ColorPoint(int x, int y, String color) { 
		super(x, y);
		this.color = color;
	}
	
	public ColorPoint(int x, int y) {
		super(x, y);
	}
	
	public void setXY(int x, int y) {
		super.move(x, y);
	}
	
	public void setColor(String color) {
		this.color = color;
	}
	
	public String toString() {
		return color + "색의 ("+ super.getX()+", "+ super.getY()+")의 점";
	}
}

>>>
class Point3D extends Point{
	private int z;
	
	public Point3D() {
		
	}
	public Point3D(int x,int y,int z) {
		super(x,y);
		this.z=z;
	}
	public void moveUp() {
		this.z++;
		return;		
	}
	public void moveDown() {
		this.z--;
		return;		
	}
	public void move(int x, int y, int z) {
			super.move(x, y);
			this.z=z;			
	}
	public String toString() {
		
		return "("+super.getX()+","+super.getY()+","+this.z+") 의 점";
	}
}
4.자바의 정석 56Page 다시 한번 정리한후 개별 진척도 업데이트 해주세요.
