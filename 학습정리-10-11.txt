1. 함수는 어떻게 알아 볼수있는가?
-기본적으로 괄호 앞에 나오는 것이 함수 명이다.

2. 함수 호출 하는 법은?
-main 함수에서 정의된 함수의 이름으로 호출한다.
-함수명(값(value));
-호출한다는 것은 정의된 함수를 실행한다는 것과 같다.
3. 함수 만드는 법은?
-리턴 타입, 메소드 이름(입력변수(parameter)){
 	블럭의 내용을 정리}

4. 리턴 타입 void 는 어떠한 경우에 쓰는가?
- 리턴 값이 없을 때 사용한다.

5. 아래를 함수로 만드시오.

starPrint2(5) 

출력
*****
 ****
  ***
   **
    *
>
	public static void main(String[] args) {

		starPrint(7);
		
	}
	public static void starPrint(int num) {
		for(int i = 1; i<=num; i++) {
			for(int j = 0; j<i-1; j++) {
				System.out.print(" ");
			}
			for(int j = 5; j>=i; j--) {
				System.out.print("*");
			}
			System.out.println();
		}
	}

5. 아래를 함수로 만드시오.

starPrint3(5) 

출력
   
    *   
   ***
  *****
 *******
*********
>
	public static void main(String[] args) {

		starPrint(5);
		
	}
	public static void starPrint(int num) {
		for(int i = 1; i<=num; i++) {
			for(int j = num-1; j>=i;j--) {
				System.out.print(" ");
			}
			for(int j = 1; j <=i*2-1;j++) {
				System.out.print("*");
			}System.out.println();
		}
	}


6.아래의 함수를 만드시오. 		

char grade;
double avg = 80;

grade = getGrade(avg);

// 우 입니다.
System.out.println(grade + " 입니다.");
>
	public static void main(String[] args) {

		char grade;
		double avg = 80;

		grade = getGrade(avg);

		// 우 입니다.
		System.out.println(grade + " 입니다.");
								
	}
	public static char getGrade(double avg) {
		char grade = '가';
		if(avg >=90) {
			grade = '수';
		}else if(avg >=80) {
			grade = '우';
		}else if(avg >=70) {
			grade = '미';
		}else if(avg >=60) {
			grade = '양';
		}else {
			grade ='가';
		}return grade;
				
	}

7.아래의 함수를 만드시오. 

int sum = getHap(1,100);
//5050
System.out.println(sum);

>
	public static void main(String[] args) {

		int sum = getHap(1,100);
		//5050
		System.out.println(sum);
				
	}
	public static int getHap(int num1,int num2) {
		int sum = 0;
		for(int i = num1; i<=num2; i++) {
			sum += i;
		}return sum;
	}

9.아래의 함수를 만드시오. 


int count = get57(1,100);
//count 는 1부터 100 까지의 숫자중 5의 배수 이자 7의 배수인 수의 갯수
System.out.println(count );
>
public static void main(String[] args) {
		
		int count = get57(1,100);
		//count 는 1부터 100 까지의 숫자중 5의 배수 이자 7의 배수인 수의 갯수
		System.out.println(count );
		
		
	}
	public static int get57(int num1,int num2) {
		int count = 0;
		for(int i =num1; i<=num2;i++) {
			if ((i % 5 == 0) && (i % 7 == 0)) {
				count++;
			}
		}return count;
}
10.아래의 함수를 만드시오. 

printGuGudan(3)// 3단 출력
printGuGudan(4)// 4단 출력
>
	public static void main(String[] args) {
		
		printGuGudan(3);// 3단 출력
		printGuGudan(4);// 4단 출력
						
	}
	public static void printGuGudan(int dan) {
		for(int i = dan; i<dan+1;i++) {
			for(int j=1; j<10;j++) {
				System.out.println(i+"x"+j+"="+(i*j));
			}
		}
	}

11.아래의 함수를 만드시오. 

getRecArea(3,5) //삼각형 넓이
getRecCirlce(5) //원넓이
getTriangleArea(4 , 5) //삼각형 넓이
>
	public static void main(String[] args) {

		getRecArea(3, 5); // 넓이
		getRecCirlce(5); // 원넓이
		getTriangleArea(4, 5); // 삼각형 넓이
	}

	public static int getRecArea(int w, int l) {
		int area = w * l;
		System.out.println(area);
		return area;
	}

	public static double getRecCirlce(double r) {
		final double PI = 3.14;
		double area = r * r * PI;
		System.out.println(area);
		return area;
	}

	public static int getTriangleArea(int w, int l) {
		int area = (w * l) / 2;
		System.out.println(area);
		return area;
	}

12. 함수로 만들면 좋은점은?
-같은 작업을(중복) 하지 않기 위해
-기능이 2번 이상 중복되면 반드시 함수로 만들것.

13.아래의 함수를 만드시오. 
int month = 4;

getSeason(3)// 봄입니다. 출력
getSeason(12)// 겨울 입니다. 출력

>
	public static void main(String[] args) {

		int month = 4;

		getSeason(3);// 봄입니다. 출력
		getSeason(12);// 겨울 입니다. 출력
		
		
	}
	public static void getSeason(int month) {
		switch (month) {
		case 1:case 2:case 3:case 4:
			System.out.println("봄 입니다.");
			break;
		case 5:case 6:case 7:case 8:
			System.out.println("여름 입니다.");
			break;
		case 9:case 10:case 11:case 12:
			System.out.println("겨울 입니다.");
			break;	
		default: System.out.println("잘못입력하였습니다.");
			break;
		}
		
	}
