1. 상속을 UML로 표시하면?

-상속의 대상이 되는 상위 클래스,기초클래스,부모클래스
-상속을 하는 하위 클래스,유도 클래스,자식클래스
-참조:학습정리-10-21-1번

2. 부모 클래스와 자식 클래스의 다른 용어들은?
-부모 클래스:상위 클래스,기초 클래스
-자식 클래스:하위 클래스,자식 클래스


3. this 키워드와 super 키워드의 차이는 무엇인가요?
-this키워드는 클래스 내의 변수를 부르는 한편 super키워드는 부모 클래스에 있는 함수나 변수를 호출하는 것이다.

4. 단일 상속과 다중 상속 이란 무엇인가요? UML 로의 표기는?
-단일 상속
ex)
class A{	}

class B extends A{   }
->이런식으로 하나의 상위 클래스에서 상속받는 것을 말한다.

-다중 상속
ex)
class A{ }

class CC{  }

class B extends A,CC{  }
->이런식으로 하나의 부모클래스가 아닌 여러개의 클래스를 상속받을 때를 다중 상속이라고 한다.
참조:학습정리-10-21-다중 

-다중 상속의 경우 기본적으로 생기는 문제점은 각각의 클래스에서 같은 이름의 변수명을 가지고 있게 되면 상속받을 때 그 둘을 구분할 수 있는 방법이 없기 때문에 자바에서는 사용하지 않는다. 또한 복잡한 함수들이 얽혀 들어가기 때문에 다중 상속을 잘 안하기 시작했다.

5.
다음은 2차원 상의 한 점을 표현하는 Point 클래스이다. 
Point를 상속받아 색을 가진 점을 나타내는 ColorPoint 클래스를 작성하라. 
다음 main() 메소드를 포함하고 실행 결과와 같이 출력되게 하라.

class Point {
	private int x, y;
	public Point(int x, int y) { this.x = x; this.y = y; }
	public int getX() { return x; }
	public int getY() { return y; }
	protected void move(int x, int y) { this.x =x; this.y = y; }

public static void main(String[] args) {
	ColorPoint cp = new ColorPoint(5, 5, "YELLOW");
	cp.setXY(10, 20);
	cp.setColor("RED");
	String str = cp.toString();
	System.out.println(str+"입니다. ");
}

/*
=======================
RED색의 (10,20)의 점입니다.
*/
>
class ColorPoint extends Point{
	private String color;
	
	public ColorPoint(int x, int y, String color) {
		super(x,y);
		this.color=color;
				
	}
	public void setXY() {
		super.move(x, y);
		return;
	}
	public String setColor() {		
		return color;
	}
	public String toString() {
		return color+"색의 ("+super.x+","+super.y+") 의 점";
	}
	
}

6. 다음 main() 메소드와 실행 결과를 참고하여 TV를 상속받은 ColorTV 클래스를 작성하라.
다음 TV 클래스가 있다.

class TV{
   private int size;
   public TV(int size) { this.size = size; }
   protected int getSize() { return size; }
}



public static void main(String[] args) {
   ColorTV myTV = new ColorTV(32, 1024);
   myTV.printProperty();
}
/*
===========
32인치 1024컬러
*/
>
class ColorTV extends TV{
	private int color;
	 
	public ColorTV(int size,int color) {
		super(size);
		this.color=color;
	 }
	public void printProperty() {
		System.out.println(super.getSize()+"인치 "+color+"컬러");
	}
	
}


7. 다음 main() 메소드와 실행 결과를 참고하여 ColorTV를 상속받는 IPTV 클래스를 작성하라.

public static void main(String[] args) {
   IPTV iptv = new IPTV("192.1.1.2", 32, 2048); //"192.1.1.2" 주소에 32인치, 2048컬러
   iptv.printProperty();
}
/*
=============================================
나의 IPTV는 192.1.1.2 주소의 32인치 2048컬러
*/
>
class TV {
	private int size;

	public TV(int size) {
		this.size = size;
	}

	protected int getSize() {
		return size;
	}
}
class ColorTV extends TV{
	private int color;
	 
	public ColorTV(int size,int color) {
		super(size);
		this.color=color;
	 }
	public void printProperty() {
		System.out.println(super.getSize()+"인치 "+color+"컬러");
	}
	
}
class IPTV extends  ColorTV{
	private String ip;
	
	public IPTV(String ip,int size,int color) {
		super(size,color);
		this.ip=ip;
	}
	public void printProperty() {
		System.out.print(ip+"주소에 ");
		super.printProperty();
	}
	
	
}
