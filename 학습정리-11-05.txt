1. 블록 태그와 인라인 태그에 대하여 설명하시오.
-Inlin Tag
>자신의 내용과 앞 뒤 태그의 내용을 같은 라인에 출력하는 태그이다. 구성 요소의 역할을 하며 내용물의 크기가 태그의 영역이 된다.
>대표적인 인라인태그로는 span태그가 있다. 그 밖에 burron태그, <a>태그,<select>태그 등이 있다.

-Block Tag
>자신의 내용과 앞 뒤 태그의 내용을 다른 라인에 출력하는 태그이다. 자신의 내용만으로 한 라인을 독접해서 출력하는 태그로 영역을 만들 때 사용한다. 내용물의 크기와 상관없이 너비는 항상 100% 높이는 내용물의 크기에 맞춰 변화한다.
>대표적인 블록태그로 div태그가 있다. 그 밖에 <form>, <h1>, <h2>, <h3>, <h4>, <h5>, <h6>, <header> 들이 있다.

2. 블록 태그와 인라인 태그의 종류를 나열 하시오.
-Block Tag
><div>,<footer>, <form>, <h1>, <h2>, <h3>, <h4>, <h5>, <h6>, <header>,<section>, <table>, <ul>, <video>

-Inline Tag
><a>,<button>,<i>, <img>, <input>,<script>, <select>, <span>,<textarea>

3. 선택자 # 과 . 에 대하여 설명하시오.
#은 id로 정의한 것에 스타일을 줄 때 사용한다.
.은 class로 정의한 것에 스타일을 줄 때, 사용된다.

4. 아래를 프로그래밍 하시오.

- 원객체 생성
- ArrayList 에 차례대로 반지름이 1인 원 부터 10인원을 입력.
- 차례대로 각각의 원 넓이 출력 
- 10개의 원넓이 합산 하여 출력.
>
import java.util.ArrayList;

class Circle {
	private double radius;

	public double getRadius() {
		return radius;
	}

	public void setRadius(double radius) {
		this.radius = radius;
	}

	public double getArea() {
		return radius * radius * Math.PI;
	}

}

public class Edu1015 {

	public static void main(String[] args) {

		ArrayList<Integer> area = new ArrayList<>();
		Circle circle = new Circle();
		double sum = 0;

		for (int i = 1; i <= 10; i++) {
			area.add(i);
			circle.setRadius(i);
			System.out.println("반지름이 " + i + "일 때," + circle.getArea());
		}
		for (int i = 1; i <= 10; i++) {
			sum += circle.getArea();
		}
		System.out.println("10개 원의 총 넓이는" + sum);

	}

}


5. ArrayList 와 LinkedList 의 차이는?
-ArrayList<E> :배열기반 자료구조 ,배열을 이용하여 인스턴스저장한다.
저장 공간을 늘리는 과정에서 시간이 비교적 많이 소요된다.
인스턴스의 삭제과정에서 많은 연산이 필요할 수 있다. 
따라서 느릴 수 있다.
저장된 인스턴스의 참조가 빠르다.

-Linker List<E> : 리스트 기반 자료구조, 리스트를 구성하여 인스턴스 저장한다. 
저장된 인스턴스의 참조 과정이 배열에 비해 복잡하다. 따라서 느릴 수 있다. 저장 공간을 늘리는 과정이 간단하며 저장된 인스턴스의 삭제과정이 단순하기 때문에 삭제하고 저장된 것이 많을 때는 이것을 쓸 것.


6. 5명의 별명을 입력 받아 ArrayList에 저장하고 이들 중 별명의 길이가
제일 긴 별명을 출력하시오. (단, 각 별명의 길이는 모두 다르게 입력한다.)
>
	public static void main(String[] args) {
		try {
			Scanner sc = new Scanner(System.in);
			System.out.println("별명을 입력하세요");
			ArrayList<String> list = new ArrayList<String>();
			int max = 0;// 제일 긴 이름의 숫자를 구하기 위해
			String lon = null;
			for (int i = 0; i < 5; i++) {
				list.add(sc.next());
			}
			System.out.println(list);

			for (int i = 0; i < list.size(); i++) {
				if (max < list.get(i).length()) {
					max = list.get(i).length();
					lon = list.get(i);
				}
			}
			System.out.println("제일 긴 별명은>>" + lon);
		} catch (Exception e) {
			System.out.println("잘못된 입력입니다.");
		}
	}

}


7.Scanner 클래스로 -1이 입력될 때까지 양의 정수를 입력받아 List에 저장하고 
List를 검색하여 가장 큰 수를 출력하는 프로그램을 작성하라.

정수(-1이 입력될 때까지)>> 10 6 22 6 88 77 -1

가장 큰 수는 88
>
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Edu1015 {

	public static void main(String[] args) {
		try {
			Scanner sc = new Scanner(System.in);
			List<Integer> list = new ArrayList<Integer>();
			int max = 0;// 최대값
			System.out.println("정수(-1이 입력될 때까지)>>");
			while (true) {
				int num = sc.nextInt();
				if (num > 0) {
					list.add(num);
				} else if (num == (-1)) {
					System.out.println("-1이 입력되었습니다.");
					break;
				}

				System.out.println(list);
				for (int i = 0; i < list.size(); i++) {
					if (max < list.get(i)) {
						max = list.get(i);
					}
				}
				System.out.println("제일 큰 수는" + max);
			}
		} catch (Exception e) {
			System.out.println("잘못된 입력입니다.");
		}
	}
}

8.Scanner 클래스를 사용하여 6개 학점('A', 'B', 'C', 'D', 'F')을 문자로 입력받아 ArrayList에 저장하고, ArrayList를 검색하여 학점을 점수(A=4.0, B=3.0, C=2.0, D=1.0, F=0)로 변환하여 평균을 출력하는 프로그램을 작성하라.

6개의 학점을 빈 칸으로 분리 입력(A/B/C/D/F) >> A C A B F D

2.3333333333333335

>
public static void main(String[] args) {
		try {
			Scanner sc = new Scanner(System.in);

			List<String> list = new ArrayList<String>();
			double sum = 0;
			double grade = 0;
			System.out.println("6개의 학점을 빈 칸으로 분리 입력(A/B/C/D/F) >>");
			for (int i = 0; i < 6; i++) {
				list.add(sc.nextLine());
			}
			for (String s : list) {
				switch (s.charAt(0)) {
				case 'A':
					grade = 4.0;
					break;
				case 'B':
					grade = 3.0;
					break;
				case 'C':
					grade = 2.0;
					break;
				case 'D':
					grade = 1.0;
				}
				sum += grade;
			}
			System.out.println("학점 평균은>>" + (sum / 6));
		} catch (Exception e) {
			System.out.println("잘못된 입력입니다.");
		}
	}

9.하나의 학생 정보를 나타내는 Student 클래스에는 이름, 학과, 학번, 학점 평균을 저장하는 필드가 있다.

(1) 학생마다 Student 객체를 생성하고 4명의 학생 정보를 ArrayList<Student> 컬렉션에 저장한 후에, ArrayList<Student>의 모든 학생(4명) 정보를 출력하고 학생 이름을 입력받아 해당 학생의 학점 평균을 출력하는 프로그램을 작성하라.



>> 황기태, 모바일, 1, 4.1

>> 이재문, 안드로이드, 2, 3.9

>> 김남윤, 웹공학, 3, 3.5

>> 최찬미, 빅데이터, 4, 4.25

----------------------------------

이름: 황기태

학과: 모바일

학번: 1

학점평균: 4.1

----------------------------------

이름: 이재문

학과: 안드로이드

학번: 2

학점평균: 3.9

----------------------------------

이름: 김남윤

학과: 웹공학

학번: 3

학점평균: 3.5

----------------------------------

이름: 최찬미

학과: 빅데이터

학번: 4

학점평균: 4.25

----------------------------------

학생 이름 >> 최찬미

최찬미, 빅데이터, 4, 4.25

학생 이름 >> 이재문

이재문, 안드로이드, 2, 3.9

학생 이름 >> 그만

>
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

class Student7 {
	private String name;
	private String major;
	private String id;
	private double grade;

	public void setInfo(ArrayList<String> list) {
		this.name = list.get(0);
		this.major = list.get(1);
		this.id = list.get(2);
		this.grade = Double.parseDouble(list.get(3));
	}

	@Override
	public String toString() {

		return ("이름: " + name + "\n" + "학과: " + major + "\n" + "학번: " + id + "\n" + "학점평균: " + grade);
	}

}

public class Practice {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		ArrayList<Student7> member = new ArrayList<Student7>();
		ArrayList<String> list = new ArrayList<String>();

		while (true) {
			System.out.println(">>>");
			String info = sc.nextLine();
			StringTokenizer st = new StringTokenizer(info, ",");

			if (st.countTokens() != 4) {
				System.out.println("잘못된 입력입니다. 다시 입력해주세요.");
				continue;
			}
			while (st.hasMoreTokens()) {
				list.add(st.nextToken());
			}
			Student7 student = new Student7();
			student.setInfo(list);
			member.add(student);
			list.clear();

			if (member.size() == 4) {
				System.out.println("입력이 끝났습니다.");
				break;
			}
		}
		for (Student7 student : member) {
			System.out.println("---------------");
			System.out.println(student);
		}

	}
}
