1. Generic 메소드에 대하여 설명하시오.

-제네릭메소드는 메소드의 선언부에 적은 제네릭으로 리턴 타입, 파라미터의 타입이 정해지는 메소드이다. 제네릭 메소드를 사용하면 T가 지역변수로 바뀐다. 제네릭 메소드를 사용하는 이유는 타입캐스팅 에러의 경우를 제외시킬 수 있기때문이다. 그리고 제너릭 메소드를 사용하면 클래스에 붙은 T와 메소드의 T는 같은 문자를 사용하더라도 다른 문자이다.
ex)
public static <T> Box<T> makeBox(T o){.......}

2.Generic(제네릭) 클래스의 타입 인자 제한하는 방법과 효과는?

-class Box<T extends Number>{....} 
>Box 클래스의 타입인자를 Number를 상속하는 클래스로 제한한다는 의미이다. 여러 타입을 제한하고 싶다면 &으로 붙여서 사용할 수 있다. 타입을 제한함으로써 잘못된 타입을 지정하면 타입 에러를 컴파일 타임에 검출해서 런타임 에러를 방지한다. 또한 타입을 제한하지 않으면 Box클래스가 호출할 수 있는 클래스는 Object클래스뿐이지만 
타입을 제한하면 해당타입의 메소드를 사용할 수 있다.

3.와일드 카드란?
-와일드 카드는 인스턴스 타입이 다른 일반 메소드를 인자로 전달 가능하게 해주는 문법이다. 
예를들어 publix static <T> void peekBox(Box<T> box){system.out.println(box); }에서 Box<Integer>의 인스턴스,Box<String>의 인스턴스를 인자로 전달 가능하다. 

하지만 publix static void peekBox(Box<Object> box){system.out.println(box); } 에서 Box<Integer>의 인스턴스,Box<String>의 인스턴스를 인자로 전달 가능할 것 같지만 Box<Object>와  Box<Integer>,Box<String>는 상속관계를 형성하지 않기때문에 전달이 불가능하다. 이경우 publix static void peekBox(Box<?> box){system.out.println(box); } 이렇게 고치게 되면 Box<Integer>와Box<String>의 인스턴스를 인자로 전달가능하다.

publix static <T> void peekBox(Box<T> box){system.out.println(box); }와 publix static void peekBox(Box<?> box){system.out.println(box); }는 기능적으로 동일하다. 그러나 와일드카드 기반 메소드 정의가 더 간결하므로 우선시해야한다고 권고하고 있다.



4. 아래가 에러나는 이유를 설명하시오.
class Box<T> {
    private T ob;     
    public void set(T o) { ob = o; }
    public get() { return ob; }
}

...

public static void inBox(Box<? super Toy> box, Toy n) {
   box.set(n);   // 넣는 것! OK!
   Toy myToy = box.get();   // 꺼내는 것! Error!
}

>Box의 타입인자를 Toy또는 Toy가 상속하는 클래스로 제한했다.  꺼내는 것이 에러가 나는 이유는 폴리몰피즘에 의해 Toy에서 Box클래스에 있는 것을 호출할 수 없기 때문이다.

5. 아래의 소스코드 중에 System.out.println(zBox.get().get().get()); 부분을 설명하시오.


class Box<T> {
	private T ob;
	
	public void set(T o) {
		ob = o;
	}

	public T get() {
		return ob;
	}
}

public class BoxInBox {

	public static void main(String[] args) {
		Box<String> sBox = new Box<>();
		sBox.set("I am so happy.");
	
		Box<Box<String>> wBox = new Box<>();
		wBox.set(sBox);
		
		Box<Box<Box<String>>> zBox = new Box<>();
		zBox.set(wBox);
		
		System.out.println(zBox.get().get().get());
	}
}

>I am so happy. 가 출력된다.
System.out.println(zBox.get().get().get()); 매개변수화 타입을 타입인자로 받아들인 zBox의 get()함수를 호출하고 있는 것이다. 먼저 Box<String>이라는 매개변수화 타입을 받아들인 wBox의 get()함수를 호출하고 그다음으로 <String>이라는 매개변수타입을 가진 sBox의 get()함수를 호출하여 최종적으로 I am so happy. 가 출력되었다.


6. 아래를 컴파일 에러가 나지 않게끔 프로그래밍 하시오.


    public static void main(String[] args) {
        Box7<Integer> box1 = new Box7<>();
        box1.set(99);

        Box7<Integer> box2 = new Box7<>();
        box2.set(55);

        System.out.println(box1.get() + " & " + box2.get());
        swapBox(box1, box2); 
        System.out.println(box1.get() + " & " + box2.get());
    }

출력 =========================================

99 & 55
55 & 99

>
class Box7<T> {
	private T ob;

	public void set(T o) {
		ob = o;
	}

	public T get() {
		return ob;
	}
}
public class Practicafter {

	public static void main(String[] args) {
		Box7<Integer> box1 = new Box7<>();
		box1.set(99);

		Box7<Integer> box2 = new Box7<>();
		box2.set(55);

		System.out.println(box1.get() + " & " + box2.get());
		swapBox(box1, box2);
		System.out.println(box1.get() + " & " + box2.get());
	}

	private static <T> void swapBox(Box7<T> box1, Box7<T> box2) {
		T tmp =b1.get();
		b1.set(b2.get());
		b2.set(tmp);		
	}

}

7.Scanner를 이용하여 한 라인을 읽고, 공백으로 분리된 어절이 몇 개 들어 있는지 "그만"을 입력할 때까지 반복하는 프로그램을 작성하라.

>>I love Java.
어절 개수는 3
>>자바는 객체 지향 언어로서 매우 좋은 언어이다.
어절 개수는 7
>>그만
종료합니다...
[Hint] Scanner.nextLine()을 이용하면 빈칸을 포함하여 한 번에 한 줄을 읽을 수 있다.

(1) StringTokenizer 클래스를 이용하여 작성하라.

>
import java.util.Scanner;
import java.util.StringTokenizer;

public static void main(String[] args) {

		while (true) {

			System.out.println("문장을 입력해주세요 >>");

			Scanner sc = new Scanner(System.in);
			String st = sc.nextLine();

			if (st.equals("그만")) {
				System.out.println("종료합니다....");
				break;
			}
			StringTokenizer str = new StringTokenizer(st);
			System.out.println("어절 개수는 " + str.countTokens());
		}
	}
