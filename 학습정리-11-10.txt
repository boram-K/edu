1.아래를 프로그래밍 하시오.

하나의 학생 정보를 나타내는 Student 클래스에는 이름, 학과, 학번, 학점 평균을 저장하는 필드가 있다.

### 문제_01

학생마다 Student 객체를 생성하고 4명의 학생 정보를 `ArrayList<Student> 컬렉션`에 저장한 후에, 
ArrayList<Student>의 모든 학생(4명) 정보를 출력하고 학생 이름을 입력 받아 해당 학생의 학점 평균을 출력하는 프로그램을 작성하라.
>
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

class Student {
	private String name, major, id;
	private double grade;

	public Student(String name, String major, String id, double grade) {

		this.name = name;
		this.major = major;
		this.id = id;
		this.grade = grade;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getMajor() {
		return major;
	}

	public void setMajor(String major) {
		this.major = major;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public double getGrade() {
		return grade;
	}

	public void setGrade(double grade) {
		this.grade = grade;
	}

	public void findStudent(String name) {
		if (this.name.equals(name)) {
			System.out.println(this.name + "," + this.major + "," + this.id + "," + this.grade);
		}
	}

}

public class Student_Arrfind {

	public static void main(String[] args) {
		final int STU_NUM = 4;
		Scanner sc = new Scanner(System.in);
		System.out.println("학생 이름,학과,학번,학점평균을 입력하세요.");
		ArrayList<Student> arrMember = new ArrayList<>();

		for (int i = 0; i < STU_NUM; i++) {
			System.out.println(">>>");
			String text = sc.nextLine();// 한줄전체를 받는 것.

			StringTokenizer st = new StringTokenizer(text, ",");
			String name = st.nextToken().trim();// 공백을 양 사이드로 자르는 것.
			String major = st.nextToken().trim();
			String id = st.nextToken().trim();
			Double grade = Double.valueOf(st.nextToken().trim());

			arrMember.add(new Student(name, major, id, grade));
		}
		for (int i = 0; i < arrMember.size(); i++) {
			System.out.println("---------------");
			Student student = arrMember.get(i);

			System.out.println("이름: " + student.getName());
			System.out.println("학과: " + student.getMajor());
			System.out.println("학번: " + student.getId());
			System.out.println("학점평균: " + student.getGrade());
			System.out.println("---------------");
		}
		// 검색하기
		System.out.println("-------------------------");

		while (true) {
			System.out.println("학생이름>>");
			String name = sc.next();

			if (name.equals("그만")) {
				break;
			}
			for (int i = 0; i < arrMember.size(); i++) {
				Student s = arrMember.get(i);
				s.findStudent(name);
			}
		}
		System.out.println("그만");
	}

}

### 문제_02

ArayList<Student> 대신, `HashMap<String, Studnet>` **해시맵을 이용하여 다시 작성**하라. 해시맵에서 키는 학생 이름으로 한다.

>
class Student1 {
	private String name, major, id;
	private double grade;

	public Student1(String name, String major, String id, double grade) {

		this.name = name;
		this.major = major;
		this.id = id;
		this.grade = grade;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getMajor() {
		return major;
	}

	public void setMajor(String major) {
		this.major = major;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public double getGrade() {
		return grade;
	}

	public void setGrade(double grade) {
		this.grade = grade;
	}

	public void findStudent(String name) {
		if (this.name.equals(name)) {
			System.out.println(this.name + "," + this.major + "," + this.id + "," + this.grade);
		}
	}

	@Override
	public String toString() {
		return "이름 : " + this.name + '\n' + "학과 : " + this.major + '\n' + "학번 : " + this.id + '\n' + "학점평균 : "
				+ this.grade;
	}

}

public class Student_Hash {

	public static void main(String[] args) {
		final int STU_NUM = 4;
		HashMap<String, Student1> hashmember = new HashMap<>();

		Scanner sc = new Scanner(System.in);

		for (int i = 0; i < STU_NUM; i++) {
			System.out.println(">>>");
			String text = sc.nextLine();// 한줄전체를 받는 것.

			StringTokenizer st = new StringTokenizer(text, ",");
			String name = st.nextToken().trim();// 공백을 양 사이드로 자르는 것.
			String major = st.nextToken().trim();
			String id = st.nextToken().trim();
			Double grade = Double.valueOf(st.nextToken().trim());

			hashmember.put(name, new Student1(name, major, id, grade));

		}

		Set<String> key = hashmember.keySet();
		for (String s : key) {
			System.out.println("---------------");
			System.out.print(hashmember.get(s).toString() + '\n');
		}
		System.out.println();

		System.out.println("-------------------------");

		while (true) {
			System.out.println("학생이름>>");
			String name = sc.next();

			if (name.equals("그만")) {
				break;
			} else {
				System.out.println(hashmember.get(name).toString());
			}
		}
		System.out.println("그만");
	}

}


2.. 다음을 프로그래밍 하시오. 

"그만"이 입력될 때까지 나라 이름과 인구를 입력 받아 저장하고, 다시 나라 이름을 입력받아 인구를 출력하는 프로그램을 작성하라. 
다음 해시맵을 이용하라.
=================================================================================
나라 이름과 인구를 입력하세요.(예: Korea 5000)
나라 이름, 인구 >> Korea 5000
나라 이름, 인구 >> USA 1000000
나라 이름, 인구 >> Swiss 2000
나라 이름, 인구 >> France 3000
나라 이름, 인구 >> 그만

인구 검색 >> France
France의 인구는 3000
인구 검색 >> 스위스
스위스 나라는 없습니다.
인구 검색 >> 그만

>
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;

public class Country_Hash {

	public static void main(String[] args) {
		HashMap<String, Integer> hsCountry = new HashMap<>();
		Scanner sc = new Scanner(System.in);

		System.out.println("나라이름과 인구를 입력하세요.(예: Korea 5000)");

		while (true) {
			System.out.println("나라 이름, 인구>>");
			String country = sc.nextLine();
			if (country.equals("그만")) {
				break;
			}
			StringTokenizer str = new StringTokenizer(country);
			String name = str.nextToken().trim();
			Integer num = Integer.valueOf(str.nextToken().trim());

			hsCountry.put(name, num);
		}
		while (true) {
			System.out.println("인구검색>>>");
			String serch = sc.next();

			if (serch.equals("그만")) {
				break;
			} else if (hsCountry.containsKey(serch)) {
				System.out.println(serch + "의 인구는 " + hsCountry.get(serch));
			} else {
				System.out.println(serch + "나라는 없습니다.");
			}
		}

	}

}


3. 스택과 큐에 대하여 설명하시오.
스택-LIFO(last-in-first-out)
>먼저 저장된 데이터가 마지막에 빠져나간다.

큐-FIFO(first-in-first-out)
>먼저 저장된 데이터가 먼저 빠져나간다


4. Map 에 대하여 설명하시오.
-Map인터페이스는 컬렉션 인터페이스와는 다른 저장방식을 가지고 있다. Map인터페이스를 구현한 Map컬렉션 크래스들은 키와 값을 하나의 쌍으로 저장하는 방식인 Key-Value방식을 사용한다. 여기에서 Key는 실질적인 값을 찾기 위한 이름의 역할을 한다.
또한 요소의 저장순서를 유지하지 않으며 Key는 중복허용을 하지 않지만 값은 중복허용을 한다.
1. HashMap<K, V>
2. Hashtable<K, V>
3. TreeMap<K, V>
이렇게 세가지의 클래스들이 Map컬렉션 클래스에 속한다.

5.아래의 TreeMap의 전체 Value 값을 확인 하기 위한 소스를 짜시오. 

TreeMap<Integer, String> map = new TreeMap<>();
map.put(45, "Brown");
map.put(37, "James");
map.put(23, "Martin");

>
public static void main(String[] args) {

	TreeMap<Integer, String> map = new TreeMap<>();
	map.put(45, "Brown");
	map.put(37, "James");
	map.put(23, "Martin");
				
	for (Map.Entry<Integer, String> entry : map.entrySet()) {
		String val = entry.getValue();
		System.out.println(val);
	}
}


6.아래의 IntegerComparator를 내림차순 정렬이 되게끔 구현하시오.
public static void main(String[] args) {
        TreeSet<Integer> tr = new TreeSet<>(new IntegerComparator());
        tr.add(30);
        tr.add(10);    
        tr.add(20);        
        System.out.println(tr);	
    }
}

>
import java.util.Comparator;
import java.util.TreeSet;

class IntegerComparator implements Comparator<Integer> {

	@Override
	public int compare(Integer num1, Integer num2) {
		return num2-num1;
	}

	
}

public class Practice11 {

	public static void main(String[] args) {

		TreeSet<Integer> tr = new TreeSet<>(new IntegerComparator());
		tr.add(30);
		tr.add(10);
		tr.add(20);
		System.out.println(tr);

	}

}
>
[30, 20, 10]

